generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String @default(uuid()) @unique @id
  email String  @unique
  name  String?
  role  Role @default(STUDENT)

  // if he is a student then he can have many results
  // user can have many group membership
  group_membership Group_membership[]
  result Result[]
  response Response[]
}

model Group {
  id String @default(uuid()) @unique @id
  name String
  // can have many members
  // can have many/one admin -> adminId[] -> group admin
  // a group can have many quizes
  group_membership Group_membership[]
  quiz Quiz[]
  
  
}

model Group_membership {
  // id  String @default(uuid()) @unique @id
  // User Id -> one to one
  // group id 
  // user type -> could be enum

  creator Boolean @default(false)
  
  user User @relation(fields: [userId], references: [id])
  userId String

  group Group @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId]) // composite
}

model Quiz {
  id  String @default(uuid()) @unique @id
  name String
  full_marks Int
  pass_marks Int
  negative_marks Int?
  questions Question[]
  answers Answer[]
  result Result[]
  response Response[]
  category Category[]

  // A quiz has many results
  // has one category
  // can have many result
  // negative marks
  // full marks
  // pass marks
  // a group can many quizes

  group Group @relation(fields: [groupId], references: [id])
  groupId String
}

model Category {
  id  String @default(uuid()) @unique @id
  category_name Category_name @default(ACHIEVEMENT) // Enum
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String

  //  a category can have many quizes
}

model Question {
  id  String @default(uuid()) @unique @id
  question_text String
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String
  options Option[]
  answer Answer?
}

model Option {
  id  String @default(uuid()) @unique @id
  option String
  txt String
  question Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Answer {
  id  String @default(uuid()) @unique @id
  answer_text String
  question Question @relation(fields: [questionId], references: [id])
  questionId String @unique
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String
}

model Response {
  id  String @default(uuid()) @unique @id

  student_response String[]

  user User @relation(fields: [userId], references: [id])
  userId String

  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String

  result Result? // A response can have zero or only one result
}

model Result {
  id  String @default(uuid()) @unique @id
  marks Int
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String
  response Response @relation(fields: [responseId], references: [id])
  responseId String @unique


  // quiz id 
  // student Id -> user Id -> might duplicate
  // Group Id
  // marks
  // negativity
  // Before result there must be a response
  // status : pass or fail

  user User @relation(fields: [userId], references: [id])
  userId String
}

enum Category_name {
  ACHIEVEMENT
  IQ
  APTITUDE
}

enum Role {
  STUDENT
  ADMIN
  TEACHER
}

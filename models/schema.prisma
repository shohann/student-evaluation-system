generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String @default(uuid()) @unique @id
  email String  @unique
  password String
  name  String?
  role  Role @default(STUDENT)
  group_membership Group_membership[]
  result Result[]
  response Response[]
}

model Group {
  id String @default(uuid()) @unique @id
  name String
  group_membership Group_membership[]
  quiz Quiz[]
}

model Group_membership {
  creator Boolean @default(false)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  @@id([userId, groupId]) // composite
}

model Quiz {
  id  String @default(uuid()) @unique @id
  name String
  full_marks Int
  pass_marks Int
  category_name Category_name @default(ACHIEVEMENT) // Enum
  questions Question[]
  answers Answer[]
  result Result[]
  response Response[]
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
}


model Question {
  id  String @default(uuid()) @unique @id
  question_text String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
  options Option[]
  answer Answer?
}

model Option {
  id  String @default(uuid()) @unique @id
  option String
  txt String
  mark Int
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}

model Answer {
  id  String @default(uuid()) @unique @id
  answer_text String
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String @unique
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
}

model Response {
  // id  String @default(uuid()) @unique @id
  @@id([userId, quizId])
  student_response String[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
  result Result? // A response can have zero or only one result
}

model Result {
  id  String @default(uuid()) @unique @id
  marks Int
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String
  response Response @relation(fields: [userId, quizId], references: [userId, quizId], onDelete: Cascade) // Multi-field relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
   // responseId String @unique
  @@unique([userId, quizId]) // one to one needs unique fields
}

enum Category_name {
  ACHIEVEMENT
  IQ
  PERSONALITY
  PSYCHOLOGICAL
}

enum Role {
  STUDENT
  TEACHER
}
